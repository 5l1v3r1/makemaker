// Generated by CoffeeScript 1.7.1
(function() {
  var Makefile, env, path,
    __hasProp = {}.hasOwnProperty;

  path = require('path');

  env = require('./environment');

  Makefile = (function() {
    function Makefile(finder, includes, outRoot) {
      this.finder = finder;
      this.includes = includes;
      this.outRoot = outRoot;
      this.rules = {};
    }

    Makefile.prototype.generateRules = function() {
      this._generateWithVars(this.finder.cSources, env.c);
      this._generateWithVars(this.finder.cppSources, env.cpp);
      return this._generateWithVars(this.finder.asmSources, env.asm, false);
    };

    Makefile.prototype.encode = function() {
      var aPath, info, result, x, _ref;
      result = 'all: ' + ((function() {
        var _ref, _results;
        _ref = this.rules;
        _results = [];
        for (x in _ref) {
          if (!__hasProp.call(_ref, x)) continue;
          _results.push(x);
        }
        return _results;
      }).call(this)).join(' ') + '\n\n';
      _ref = this.rules;
      for (aPath in _ref) {
        if (!__hasProp.call(_ref, aPath)) continue;
        info = _ref[aPath];
        result += aPath + ': ' + info.deps + '\n';
        result += '\t' + info.command + '\n\n';
      }
      return result;
    };

    Makefile.prototype._addRule = function(outPath, deps, command) {
      if (this.rules[outPath] != null) {
        return;
      }
      return this.rules[outPath] = {
        deps: deps,
        command: command
      };
    };

    Makefile.prototype._generateWithTemplate = function(files, template) {
      var command, file, input, output, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        output = path.join(this.outRoot, this._simplifyName(file));
        output = output.replace(/\.[a-z]*$/, '.o');
        input = path.join(env.root, file);
        command = template.replace('%OUT', output).replace('%IN', input);
        _results.push(this._addRule(output, input, command));
      }
      return _results;
    };

    Makefile.prototype._generateWithVars = function(files, envInfo, extraFlags) {
      var command, compiler, flags, includes;
      if (extraFlags == null) {
        extraFlags = true;
      }
      compiler = envInfo.compiler, flags = envInfo.flags;
      if (extraFlags) {
        includes = this._getIncludes();
        command = "" + compiler + " -c " + flags + " " + includes + " %IN -o %OUT";
      } else {
        command = "" + compiler + " " + (flags != null ? flags : '') + " %IN -o %OUT";
      }
      return this._generateWithTemplate(files, command);
    };

    Makefile.prototype._simplifyName = function(name) {
      return name.replace(/\//g, '_').replace('..', '__');
    };

    Makefile.prototype._getIncludes = function() {
      var aPath, val, _i, _len, _ref;
      val = env.includes;
      _ref = this.includes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        aPath = _ref[_i];
        if (val.length) {
          val += ' ';
        }
        val += '-I' + path.join(env.root, aPath);
      }
      return val;
    };

    return Makefile;

  })();

  module.exports = Makefile;

}).call(this);
